// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  projects      Member[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id            String    @id @default(uuid())
  logo          String?
  title         String
  description   String?
  auditLog      AuditLog?
  projects      Project[]
  members       Member[]
  inviteEnabled Boolean   @default(false)
  inviteLink    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Roles {
  owner
  admin
  user
}

model Member {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        Roles     @default(user)
  assignedAt  DateTime  @default(now())
  assignedBy  String

  @@id([userId, workspaceId])
}

model Project {
  id          String      @id @default(uuid())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  title       String
  parameters  Parameter[]
  task        Task[]
  archive Boolean @default(false)
  createdBy   String
  updatedBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Parameter {
  id    String @id @default(uuid())
  title String
  index Float //position in list

  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  options   Option[]
  createdBy String
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Option {
  id          String         @id @default(uuid())
  parameterId String
  parameter   Parameter      @relation(fields: [parameterId], references: [id])
  label       String
  createdBy   String
  updatedBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  tasks       OptionOnTask[]
}

model OptionOnTask {
  optionId String
  option   Option @relation(fields: [optionId], references: [id])
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id])

  @@id([optionId, taskId])
}

model Task {
  id        String  @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  parentId  String?
  parent    Task?   @relation("parent", fields: [parentId], references: [id])
  children  Task[]  @relation("parent")

  index Float? //position in list

  options OptionOnTask[]

  complete     Boolean   @default(false)
  due          DateTime?
  title        String
  description  String?   @db.Text
  commentCount Int       @default(0)

  createdBy  String?
  updatedBy  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  assignedTo String?
  assignedBy String?
}

model AuditLog {
  id          String      @id @default(uuid())
  workspaceId String      @unique
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])

  action      ACTION

  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String

  userId      String
  userImage   String?      @db.Text
  userName    String?      @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  WORKSPACE
  PROJECT
  SECTION
  TASK
}
